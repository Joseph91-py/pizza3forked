####################################################################################################
#
# combined TLSPH / ULSPH mouthfeel simulation (based on example 2, p 20 of USER-SMD manual)
# This simulations requires the package USER-SMD available in LAMMPS (Smooth Mach Dynamics)
#
# Release candidate $2020-01-09$ / included in git
#
# INRAE\Olivier Vitrac, INRAE\William Jenkinson
#
### DETAILS / early simulation
#
# The displacements are relative to the tongue 
# Saliva is modelled using the Updated Lagrangian formalism.
# Mouth bodies are modelled using the  Total Lagrangian formalism.
# Contact forces between mouth, mouth bodies, and saliva prevent # mutual penetration
#
# unit system: GPa / mm / ms
#
##### Additional information, how to use OMP
# env OMP_NUM_THREADS=16 lmpall -sf omp -in in.mouthfeel_v0           # 1 MPI task, 16 threads according to OMP_NUM_THREADS
# lmpall -sf omp -in in.mouthfeel_v0                                  # 1 MPI task, no threads, optimized kernels
# mpirun -np 4 lmpall -sf omp -pk omp 4 -in in.mouthfeel_v0           # 4 MPI tasks, 4 threads/task
# mpirun -np 32 -ppn 4 lmpall -sf omp -pk omp 4 -in in.mouthfeel_v0   # 8 nodes, 4 MPI tasks/node, 4 threads/
####################################################################################################

variable outputfile string "dump.mouthfeel_v5_long"
variable tsim equal 500000
variable outstep equal 100

####################################################################################################
# MATERIAL PARAMETERS 
####################################################################################################
variable        rho_saliva equal 1000 # mass density saliva
variable        rho_obj equal 1300 # mass density solid objects
variable        c0 equal 10.0 # speed of sound for saliva
variable        E equal 5*${c0}*${c0}*${rho_saliva} # Young's modulus for solid objects
variable        Etongue1 equal 10*${E} # Young's modulus for tongue 
variable        Etongue2 equal 2*${Etongue1} # Young's modulus for tongue 
variable        nu equal 0.3 # Poisson ratio for solid objects
variable        sigma_yield equal 0.1*${E} # plastic yield stress for solid objects
variable        hardening_food equal 0 # plastic hardening parameter for solid food
variable        hardening_tongue equal 1 # plastic hardening parameter for solid tongue
variable        contact_stiffness equal 2.5*${c0}^2*${rho_saliva} # contact force amplitude
variable        contact_wall equal 100*${contact_stiffness} # contact with wall (avoid interpenetration)
variable        q1 equal 1.0 # artificial viscosity
variable        q2 equal 0.0 # artificial viscosity
variable        Hg equal 10 # Hourglass control coefficient for solid objects
variable        Cp equal 1.0 # heat capacity -- not used here

####################################################################################################
# INITIALIZE LAMMPS
####################################################################################################
units           si
dimension       2
boundary        sm sm p
atom_style      smd
neigh_modify    every 5 delay 0 check yes
comm_modify     vel yes
newton          off
atom_modify     map array
comm_style      tiled

####################################################################################################
# CREATE INITIAL GEOMETRY
# note there are 4 groups (create_box      5 box)
# groupID 1 = saliva
# groupID 2 = food
# groupID 3 = mouth walls
# groupID 4 = tongue alike (part1)
# groupID 5 = also tongue but palate infact (part2)
####################################################################################################
# create simulation box, a mouth, and a saliva column
variable        l0 equal 0.05 # initial particle lattice spacing
region          box block 0 12 0 8 -0.01 0.01 units box
create_box      5 box
region          saliva1 block 0.25 1.8 1.25 3.5 EDGE EDGE units box
region          saliva2 block 10 11.65 1.25 4 EDGE EDGE units box
region          mouth block 0.15 11.85 0.15 8 -0.01 0.01 units box side out # mouth
lattice         sq ${l0}
create_atoms    1 region saliva1
create_atoms    1 region saliva2
group           saliva type 1
create_atoms    3 region mouth
group           mouth type 3

# create a "tongue" (with two parts; tongue and palate)
# objects are positionned on floors (yfloor1, yfloor2, yfloor3)
# default size
variable        hgap equal 0.25        # gap to prevent direct contact at t=0 (too much enery)
variable        hsmallgap equal 0.1   # gap to prevent direct contact at t=0 (too much enery)
variable        hto1 equal 0.8         # height of to1 (the tongue to1, note 1 not l)
variable        hto2 equal 0.5         # height of to2 (the tongue to2)
variable        rsph equal 0.3         # radius of spherical food particles
variable        lpar equal 0.6         # size of prismatic particles 
# floor1/roof1: 1st floor and roof
variable        yfloor1 equal ${hgap}  # bottom position of to1, position of the first floor
variable        yroof1 equal ${yfloor1}+${hto1} # bottom position of to1, position of the first floor
# floor2a,b,c / roof2a,b,c: 2nd floor and roof (with intermediate levels)
# level a: on top of to1
# level b: on top of level a
# level c: between a and b, for spherical particles
variable        yfloor2a equal ${yroof1}+${hsmallgap}  # position of the second floor / level a
variable        yroof2a equal ${yfloor2a}+${lpar}      # position of the second floor / level a
variable        yfloor2b equal ${yroof2a}+${hsmallgap} # position of the second floor / level b
variable        yroof2b equal ${yfloor2b}+${lpar}      # position of the second floor / level b
variable        yfloor2c equal ${yfloor2a}+${rsph}     # position of the second floor / level c
variable        yroof2c equal ${yfloor2c}+${rsph}      # position of the second floor / level c
variable        yfloor2d equal ${yroof2c}+${rsph}+${hsmallgap} # position of the second floor / level d
variable        yroof2d equal ${yfloor2d}+${rsph}      # position of the second floor / level d
# floor3/roof3: 3rd floor and roof
# a pseudo "tooth" is done at position 3a
variable        yfloor3 equal 5.0      # third floor
variable        yroof3 equal ${yfloor3}+${hto2} # bottom position of to1
variable        yfloor3a equal ${yfloor3}-0.6
variable        yroof3a equal ${yfloor3}

# crunch distance: crunchl, period: crunchp, velocity: crunchv
# using the shortcurts l,P,v and assuming v = v0 sin(wt)
# the distance D visited during P/2 (which should be equal to l) reads:
#   D = integrate (v0*sin (w*t)*dt) from t=0 to P/2 
#   D = (2*v0*sin^2((P*w)/4))/w
# see: https://www.wolframalpha.com/input/?i=integrate+%28v0*sin+%28w*t%29*dt%29+from+t%3D0+to+P%2F2
variable        crunchl equal ${yfloor3}-${yfloor2a}-0.8
variable        crunchp equal 3   # real time (time are not time steps)
variable        crunchw equal 2*PI/${crunchp}
variable        crunchd equal 2*(sin((${crunchp}*${crunchw})/4)^2)/${crunchw}
variable        crunchv equal ${crunchl}/${crunchd}
print "Crunch distance:${crunchl}"  # 3.65
print "Crunch distance:${crunchv}"  # 0.1147


# bottom part of the tongue: to1 (real tongue)
# warning: all displacements are relative to the bottom part
region          to1 block 1 11 ${yfloor1} ${yroof1} EDGE EDGE units box
region          to2part1 block 0.5 11.5 ${yfloor3} ${yroof3} EDGE EDGE units box
region          to2part2 block 5.5 6 ${yfloor3a} ${yroof3a} EDGE EDGE units box
region          to2 union 2 to2part1 to2part2
create_atoms    4 region to1
create_atoms    5 region to2
group           tongue1 type 4
group           tongue2 type 5

# create some solid objects to be pushed around
region          pr1 prism 2 2.6 ${yfloor2a} ${yroof2a} EDGE EDGE 0.3 0 0 units box
region          bl1 block 3 3.6 ${yfloor2a} ${yroof2a} EDGE EDGE units box
region          sp1 sphere 4.3 ${yfloor2c} 0 ${rsph} units box
region          sp2 sphere 5 ${yfloor2c} 0 ${rsph} units box
region          sp3 sphere 5.7 ${yfloor2c} 0 ${rsph} units box
region          sp4 sphere 6.4 ${yfloor2c} 0 ${rsph} units box
region          sp5 sphere 7.1 ${yfloor2c} 0 ${rsph} units box
region          sp6 sphere 6.05 ${yfloor2d} 0 ${rsph} units box
region          br2 block 3 3.6 ${yfloor2b} ${yroof2b} EDGE EDGE units box

# fill the regions with atoms (note that atoms = smoothed hydrodynamics particles)
create_atoms    2 region pr1
create_atoms    2 region bl1
create_atoms    2 region sp1
create_atoms    2 region sp2
create_atoms    2 region sp3
create_atoms    2 region sp4
create_atoms    2 region sp5
create_atoms    2 region sp6
create_atoms    2 region br2

# atoms of objects are grouped with two id
# fix apply only to groups
group           solidfoods type 2
group           tlsph type 2

# group heavy
group           allheavy type 1:4 

####################################################################################################
# DISCRETIZATION PARAMETERS
####################################################################################################
variable        h equal 2.5*${l0} # SPH kernel diameter
variable        vol_one equal ${l0}^2 # initial particle volume for 2d simulation
set             group all diameter ${h}
set             group all smd/contact/radius ${l0}
set             group all volume  ${vol_one}
set             group all smd/mass/density ${rho_saliva}
set             group solidfoods smd/mass/density ${rho_obj}
set             group tongue1 smd/mass/density ${rho_obj}
set             group tongue2 smd/mass/density ${rho_obj}
variable        contact_scale equal 1.5 # scale factor to increase contact gap between bodies
variable        skin equal ${h} # Verlet list range
neighbor        ${skin} bin

####################################################################################################
# DEFINE BOUNDARY CONDITIONS
#
# note that the the particles constituting the mouth are simply not integrated in time,
# thus these particles never move. This is equivalent to a fixed displacement boundary condition.
####################################################################################################
fix             gfix allheavy gravity -9.81 vector 0 1 0 # add gravity


####################################################################################################
# moving top "tongue" (to2)
####################################################################################################
variable vmouth equal -${crunchv}*sin(${crunchw}*time)
fix             move_fix_tongue2 tongue2 smd/setvel 0 v_vmouth 0


####################################################################################################
# INTERACTION PHYSICS / MATERIAL MODEL
# 3 different pair styles are used:
#     - updated Lagrangian SPH for saliva
#     - total Lagrangian SPH for solid objects
#     - a repulsive Hertzian potential for contact forces between different physical bodies
####################################################################################################
pair_style      hybrid/overlay smd/ulsph *DENSITY_CONTINUITY *VELOCITY_GRADIENT *NO_GRADIENT_CORRECTION &
                               smd/tlsph smd/hertz ${contact_scale}
pair_coeff      1 1 smd/ulsph *COMMON ${rho_saliva} ${c0} ${q1} ${Cp} 0 &
                *EOS_TAIT 7.0 &
                *END
pair_coeff      2 2 smd/tlsph *COMMON ${rho_obj} ${E} ${nu} ${q1} ${q2} ${Hg} ${Cp} &
                *STRENGTH_LINEAR_PLASTIC ${sigma_yield} ${hardening_food} &
                *EOS_LINEAR &
                *END
pair_coeff      4 4 smd/tlsph *COMMON ${rho_obj} ${Etongue1} ${nu} ${q1} ${q2} ${Hg} ${Cp} &
                *STRENGTH_LINEAR_PLASTIC ${sigma_yield} ${hardening_tongue} &
                *EOS_LINEAR &
                *END
pair_coeff      5 5 smd/tlsph *COMMON ${rho_obj} ${Etongue2} ${nu} ${q1} ${q2} ${Hg} ${Cp} &
                *STRENGTH_LINEAR_PLASTIC ${sigma_yield} ${hardening_tongue} &
                *EOS_LINEAR &
                *END

pair_coeff      3 3 none   # wall-wall
pair_coeff      1 2 smd/hertz ${contact_stiffness} # saliva-food
pair_coeff      1 3 smd/hertz ${contact_wall} # saliva-wall
pair_coeff      2 3 smd/hertz ${contact_wall} # food-wall
pair_coeff      2 2 smd/hertz ${contact_stiffness} # food-food
# add 4 (to1)
pair_coeff      1 4 smd/hertz ${contact_stiffness} # saliva-tongue1
pair_coeff      2 4 smd/hertz ${contact_stiffness} # food-tongue1
pair_coeff      3 4 smd/hertz ${contact_wall} # wall-tongue1
pair_coeff      4 4 smd/hertz ${contact_stiffness} # tongue1-tongue1
# add 5 (to2)
pair_coeff      1 5 smd/hertz ${contact_stiffness} # saliva-tongue2
pair_coeff      2 5 smd/hertz ${contact_stiffness} # food-tongue2
pair_coeff      3 5 smd/hertz ${contact_wall} # wall-tongue2
pair_coeff      4 5 smd/hertz ${contact_stiffness} # tongue1-tongue2
pair_coeff      5 5 smd/hertz ${contact_stiffness} # tongue2-tongue2


####################################################################################################
# TIME INTEGRATION
####################################################################################################
fix             dtfix tlsph smd/adjust_dt 0.1 # dynamically adjust time increment every step
fix             integration_fix_water saliva smd/integrate_ulsph adjust_radius 1.01 10 15
fix             integration_fix_solids solidfoods smd/integrate_tlsph
fix             integration_fix_tongue1 tongue1 smd/integrate_tlsph
fix             integration_fix_tongue2 tongue2 smd/integrate_tlsph


####################################################################################################
# SPECIFY TRAJECTORY OUTPUT
####################################################################################################
compute         eint all smd/internal/energy
compute         contact_radius all smd/contact/radius
compute         S solidfoods smd/tlsph/stress
compute         nn saliva smd/ulsph/num/neighs
compute         epl solidfoods smd/plastic/strain
compute         vol all smd/vol
compute         rho all smd/rho

dump            dump_id all custom ${outstep} ${outputfile} id type x y &
                fx fy vx vy c_eint c_contact_radius mol &
                c_S[1] c_S[2] c_S[4] mass radius c_epl c_vol c_rho c_nn proc
dump_modify     dump_id first yes


####################################################################################################
# STATUS OUTPUT
####################################################################################################
compute         alleint all reduce sum c_eint
variable        etot equal pe+ke+c_alleint+f_gfix # total energy of the system
thermo          100
thermo_style    custom step ke pe v_etot c_alleint f_dtfix dt
thermo_modify   lost ignore

####################################################################################################
# RUN SIMULATION
####################################################################################################
fix             balance_fix all balance 500 0.9 rcb # load balancing for MPI
run             ${tsim}